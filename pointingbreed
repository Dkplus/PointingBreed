#!/usr/bin/env php
<?php

use PointingBreed\Console;
use PointingBreed\Git;
use PointingBreed\Gitlab;
use PointingBreed\Listener;
use PointingBreed\Reporting;
use PointingBreed\ReportGenerator;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\EventDispatcher\EventDispatcher;

$autoloadFiles = [__DIR__ . '/vendor/autoload.php', __DIR__ . '/../../autoload.php'];
$autoloaded    = false;
foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        $autoloaded = true;
        break;
    }
}
if (! $autoloaded) {
    throw new \RuntimeException('An autoloader could not be detected: did you install this package via composer?');
}

$events = new EventDispatcher();
$events->addListener(Console\AutodetectInputEvent::NAME, new Listener\AutodetectGitlabHostListener());
$events->addListener(Console\AutodetectInputEvent::NAME, new Listener\AutodetectGitlabCiHostListener());
$events->addListener(Console\AutodetectInputEvent::NAME, new Listener\AutodetectCommitsListener());
$events->addListener(Console\AutodetectInputEvent::NAME, new Listener\AutodetectGitlabProjectIdListener());
$events->addListener(Console\AutodetectInputEvent::NAME, new Listener\AutodetectGitlabCiProjectIdListener());
$events->addListener(Console\AutodetectInputEvent::NAME, new Listener\AutodetectGitlabPrivateTokenListener());

$git       = new Git\SebastianGit();
$reporters = new Gitlab\GitlabReporterFactory(new Reporting\DefaultFormatFactory(new Reporting\EmojiFormat()));
$reporters = new Reporting\UnknownReportsFilterFactory($git, $reporters);

$cli = new Application('pointingbreed');
$cli->getDefinition()->addOptions([
    new Console\CommitOption(),
    new Console\CommitBeforeOption(),
    new Console\GitlabHostOption(),
    new Console\GitlabCiHostOption(),
    new Console\GitlabPrivateTokenOption(),
    new Console\GitlabProjectIdOption(),
    new Console\GitlabCiProjectIdOption(),
    new Console\FilterOption(),
]);
$cli->add(new Console\ReportCheckstyleCommand(
    $events,
    new ReportGenerator\ReportFromCheckstyleGenerator(getcwd()),
    $reporters
));
$cli->add(new Console\ReportFinalizerCommand(
    $events,
    new ReportGenerator\ReportFromFinalizerGenerator(getcwd()),
    $reporters
));
$cli->run();
